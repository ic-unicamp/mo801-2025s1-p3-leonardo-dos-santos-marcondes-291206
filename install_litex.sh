#!/bin/bash

echo "üîß Instala√ß√£o do LiteX Framework"
echo "================================="
echo ""

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar sistema operacional
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "‚úÖ Sistema Linux detectado"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "‚úÖ Sistema macOS detectado"
else
    echo "‚ö†Ô∏è  Sistema n√£o testado, tentando instala√ß√£o Linux"
fi

echo ""
echo "üìã PASSO 1: Verificando depend√™ncias do sistema"
echo "================================================"

# Depend√™ncias b√°sicas
DEPS_MISSING=0

echo "Verificando depend√™ncias b√°sicas..."

if ! command_exists python3; then
    echo "‚ùå Python3 n√£o encontrado"
    DEPS_MISSING=1
else
    echo "‚úÖ Python3: $(python3 --version)"
fi

if ! command_exists pip3; then
    echo "‚ùå pip3 n√£o encontrado"
    DEPS_MISSING=1
else
    echo "‚úÖ pip3: $(pip3 --version | head -1)"
fi

if ! command_exists git; then
    echo "‚ùå Git n√£o encontrado"
    DEPS_MISSING=1
else
    echo "‚úÖ Git: $(git --version)"
fi

if ! command_exists make; then
    echo "‚ùå Make n√£o encontrado"
    DEPS_MISSING=1
else
    echo "‚úÖ Make: $(make --version | head -1)"
fi

if ! command_exists gcc; then
    echo "‚ùå GCC n√£o encontrado"
    DEPS_MISSING=1
else
    echo "‚úÖ GCC: $(gcc --version | head -1)"
fi

if [ $DEPS_MISSING -eq 1 ]; then
    echo ""
    echo "‚ùå Depend√™ncias b√°sicas faltando. Instale com:"
    echo ""
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "sudo apt update"
        echo "sudo apt install -y python3 python3-pip git build-essential"
        echo "sudo apt install -y python3-dev python3-setuptools"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "brew install python3 git"
        echo "xcode-select --install"
    fi
    echo ""
    echo "Execute este script novamente ap√≥s instalar as depend√™ncias."
    exit 1
fi

echo ""
echo "üìã PASSO 2: Verificando Python e pip"
echo "====================================="

# Verificar vers√£o do Python
PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
echo "Python vers√£o: $PYTHON_VERSION"

if (( $(echo "$PYTHON_VERSION < 3.8" | bc -l) )); then
    echo "‚ö†Ô∏è  Python $PYTHON_VERSION pode ter problemas. Recomendado: Python 3.8+"
fi

# Atualizar pip
echo "Atualizando pip..."
python3 -m pip install --upgrade pip

echo ""
echo "üìã PASSO 3: Instala√ß√£o do LiteX"
echo "================================"

echo "Instalando LiteX framework..."
echo "Isso pode demorar alguns minutos..."
echo ""

# Op√ß√£o 1: Instala√ß√£o simples via pip
echo "Tentando instala√ß√£o via pip..."
python3 -m pip install --user litex[develop]

if [ $? -eq 0 ]; then
    echo "‚úÖ LiteX instalado via pip com sucesso!"
else
    echo "‚ö†Ô∏è  Instala√ß√£o via pip falhou, tentando m√©todo alternativo..."
    
    # Op√ß√£o 2: Instala√ß√£o via reposit√≥rio
    echo ""
    echo "Instalando via reposit√≥rio GitHub..."
    
    # Criar diret√≥rio tempor√°rio
    TEMP_DIR=$(mktemp -d)
    cd "$TEMP_DIR"
    
    # Clonar reposit√≥rio principal
    git clone https://github.com/enjoy-digital/litex.git
    cd litex
    
    # Instalar
    python3 -m pip install --user -e .
    
    # Voltar ao diret√≥rio original
    cd "$OLDPWD"
    rm -rf "$TEMP_DIR"
fi

echo ""
echo "üìã PASSO 4: Instala√ß√£o de depend√™ncias adicionais"
echo "================================================="

echo "Instalando ferramentas adicionais..."

# Migen (depend√™ncia do LiteX)
python3 -m pip install --user migen

# Outras depend√™ncias √∫teis
python3 -m pip install --user colorama pexpect

echo ""
echo "üìã PASSO 5: Verifica√ß√£o da instala√ß√£o"
echo "====================================="

echo "Testando LiteX..."

# Teste b√°sico do LiteX
python3 -c "import litex; print('‚úÖ LiteX importado com sucesso!')" 2>/dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ LiteX funcionando!"
else
    echo "‚ùå LiteX n√£o funciona ainda..."
    
    # Diagn√≥stico
    echo ""
    echo "üîç DIAGN√ìSTICO:"
    echo "Python path:"
    python3 -c "import sys; print('\n'.join(sys.path))"
    
    echo ""
    echo "Pacotes instalados relacionados ao LiteX:"
    python3 -m pip list | grep -i litex || echo "Nenhum pacote LiteX encontrado"
    
    echo ""
    echo "üí° SOLU√á√ÉO:"
    echo "1. Verifique se ~/.local/bin est√° no PATH:"
    echo "   echo \$PATH | grep -o ~/.local/bin"
    echo ""
    echo "2. Se n√£o estiver, adicione ao ~/.bashrc:"
    echo "   echo 'export PATH=\$HOME/.local/bin:\$PATH' >> ~/.bashrc"
    echo "   source ~/.bashrc"
    echo ""
    echo "3. Tente instalar globalmente (se tiver permiss√£o):"
    echo "   sudo python3 -m pip install litex[develop]"
fi

echo ""
echo "üìã PASSO 6: Instala√ß√£o do Verilator (se necess√°rio)"
echo "==================================================="

if ! command_exists verilator; then
    echo "Instalando Verilator..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo apt update
        sudo apt install -y verilator
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install verilator
    fi
    
    if command_exists verilator; then
        echo "‚úÖ Verilator instalado: $(verilator --version | head -1)"
    else
        echo "‚ö†Ô∏è  Verilator n√£o foi instalado automaticamente"
        echo "   Instale manualmente conforme sua distribui√ß√£o"
    fi
else
    echo "‚úÖ Verilator j√° instalado: $(verilator --version | head -1)"
fi

echo ""
echo "üìã RESUMO FINAL"
echo "==============="

# Verifica√ß√£o final
echo "Verificando instala√ß√µes..."

if python3 -c "import litex" 2>/dev/null; then
    echo "‚úÖ LiteX: OK"
else
    echo "‚ùå LiteX: Falhou"
fi

if command_exists verilator; then
    echo "‚úÖ Verilator: OK"
else
    echo "‚ùå Verilator: Faltando"
fi

if python3 -c "import migen" 2>/dev/null; then
    echo "‚úÖ Migen: OK"
else
    echo "‚ùå Migen: Falhou"
fi
